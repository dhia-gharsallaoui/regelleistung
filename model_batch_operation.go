/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchOperation{}

// BatchOperation struct for BatchOperation
type BatchOperation struct {
	// A permitted relative BSP API v2 resource path.
	Path string `json:"path"`
	Method BatchSupportedHttpMethod `json:"method"`
	Body *BatchOperationBody `json:"body,omitempty"`
}

// NewBatchOperation instantiates a new BatchOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchOperation(path string, method BatchSupportedHttpMethod) *BatchOperation {
	this := BatchOperation{}
	this.Path = path
	this.Method = method
	return &this
}

// NewBatchOperationWithDefaults instantiates a new BatchOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchOperationWithDefaults() *BatchOperation {
	this := BatchOperation{}
	return &this
}

// GetPath returns the Path field value
func (o *BatchOperation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *BatchOperation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *BatchOperation) SetPath(v string) {
	o.Path = v
}

// GetMethod returns the Method field value
func (o *BatchOperation) GetMethod() BatchSupportedHttpMethod {
	if o == nil {
		var ret BatchSupportedHttpMethod
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *BatchOperation) GetMethodOk() (*BatchSupportedHttpMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *BatchOperation) SetMethod(v BatchSupportedHttpMethod) {
	o.Method = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *BatchOperation) GetBody() BatchOperationBody {
	if o == nil || isNil(o.Body) {
		var ret BatchOperationBody
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchOperation) GetBodyOk() (*BatchOperationBody, bool) {
	if o == nil || isNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *BatchOperation) HasBody() bool {
	if o != nil && !isNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given BatchOperationBody and assigns it to the Body field.
func (o *BatchOperation) SetBody(v BatchOperationBody) {
	o.Body = &v
}

func (o BatchOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["method"] = o.Method
	if !isNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

type NullableBatchOperation struct {
	value *BatchOperation
	isSet bool
}

func (v NullableBatchOperation) Get() *BatchOperation {
	return v.value
}

func (v *NullableBatchOperation) Set(val *BatchOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchOperation(val *BatchOperation) *NullableBatchOperation {
	return &NullableBatchOperation{value: val, isSet: true}
}

func (v NullableBatchOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


