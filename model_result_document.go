/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ResultDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultDocument{}

// ResultDocument Any result document that you can download.
type ResultDocument struct {
	// ID of a resource.
	Id *string `json:"id,omitempty"`
	// Document name
	FileName *string `json:"fileName,omitempty"`
	// Creation time of the document.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	ProductType *ProductType `json:"productType,omitempty"`
	// Delivery day
	DeliveryDate *string `json:"deliveryDate,omitempty"`
	Market *ReserveMarket `json:"market,omitempty"`
	// The tender identification is structured as follows:   `[productType]-[deliveryDate]-[market]-[sequenceNumber]`    * `productType` - one of `fcr`, `afrr` or `mfrr`   * `deliveryDate` - ISO 8601 date   * `market` - one of `cm`(capacity market) or `em`(energy market)   * `sequenceNumber` - An ascending number for the identification of different tender runs or time slices.   For more details on the new tender id format, see the [reference guide.](/docs/guide#tender-id). 
	Tender *string `json:"tender,omitempty"`
	// Tags are used to group the documents. A list of current tags can be found in the API documentation. 
	Tags []string `json:"tags,omitempty"`
}

// NewResultDocument instantiates a new ResultDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultDocument() *ResultDocument {
	this := ResultDocument{}
	return &this
}

// NewResultDocumentWithDefaults instantiates a new ResultDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultDocumentWithDefaults() *ResultDocument {
	this := ResultDocument{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResultDocument) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResultDocument) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResultDocument) SetId(v string) {
	o.Id = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ResultDocument) GetFileName() string {
	if o == nil || isNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetFileNameOk() (*string, bool) {
	if o == nil || isNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ResultDocument) HasFileName() bool {
	if o != nil && !isNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ResultDocument) SetFileName(v string) {
	o.FileName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ResultDocument) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ResultDocument) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ResultDocument) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *ResultDocument) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *ResultDocument) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *ResultDocument) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *ResultDocument) GetDeliveryDate() string {
	if o == nil || isNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetDeliveryDateOk() (*string, bool) {
	if o == nil || isNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *ResultDocument) HasDeliveryDate() bool {
	if o != nil && !isNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *ResultDocument) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *ResultDocument) GetMarket() ReserveMarket {
	if o == nil || isNil(o.Market) {
		var ret ReserveMarket
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil || isNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *ResultDocument) HasMarket() bool {
	if o != nil && !isNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given ReserveMarket and assigns it to the Market field.
func (o *ResultDocument) SetMarket(v ReserveMarket) {
	o.Market = &v
}

// GetTender returns the Tender field value if set, zero value otherwise.
func (o *ResultDocument) GetTender() string {
	if o == nil || isNil(o.Tender) {
		var ret string
		return ret
	}
	return *o.Tender
}

// GetTenderOk returns a tuple with the Tender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetTenderOk() (*string, bool) {
	if o == nil || isNil(o.Tender) {
		return nil, false
	}
	return o.Tender, true
}

// HasTender returns a boolean if a field has been set.
func (o *ResultDocument) HasTender() bool {
	if o != nil && !isNil(o.Tender) {
		return true
	}

	return false
}

// SetTender gets a reference to the given string and assigns it to the Tender field.
func (o *ResultDocument) SetTender(v string) {
	o.Tender = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ResultDocument) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDocument) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ResultDocument) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ResultDocument) SetTags(v []string) {
	o.Tags = v
}

func (o ResultDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !isNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !isNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	// skip: tender is readOnly
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableResultDocument struct {
	value *ResultDocument
	isSet bool
}

func (v NullableResultDocument) Get() *ResultDocument {
	return v.value
}

func (v *NullableResultDocument) Set(val *ResultDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableResultDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableResultDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultDocument(val *ResultDocument) *NullableResultDocument {
	return &NullableResultDocument{value: val, isSet: true}
}

func (v NullableResultDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


