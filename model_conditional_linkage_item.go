/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConditionalLinkageItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalLinkageItem{}

// ConditionalLinkageItem struct for ConditionalLinkageItem
type ConditionalLinkageItem struct {
	// Bid identification
	LinkedTo string `json:"linkedTo"`
	Condition *LinkageCondition `json:"condition,omitempty"`
}

// NewConditionalLinkageItem instantiates a new ConditionalLinkageItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalLinkageItem(linkedTo string) *ConditionalLinkageItem {
	this := ConditionalLinkageItem{}
	this.LinkedTo = linkedTo
	var condition LinkageCondition = _01
	this.Condition = &condition
	return &this
}

// NewConditionalLinkageItemWithDefaults instantiates a new ConditionalLinkageItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalLinkageItemWithDefaults() *ConditionalLinkageItem {
	this := ConditionalLinkageItem{}
	var condition LinkageCondition = _01
	this.Condition = &condition
	return &this
}

// GetLinkedTo returns the LinkedTo field value
func (o *ConditionalLinkageItem) GetLinkedTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkedTo
}

// GetLinkedToOk returns a tuple with the LinkedTo field value
// and a boolean to check if the value has been set.
func (o *ConditionalLinkageItem) GetLinkedToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkedTo, true
}

// SetLinkedTo sets field value
func (o *ConditionalLinkageItem) SetLinkedTo(v string) {
	o.LinkedTo = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionalLinkageItem) GetCondition() LinkageCondition {
	if o == nil || isNil(o.Condition) {
		var ret LinkageCondition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalLinkageItem) GetConditionOk() (*LinkageCondition, bool) {
	if o == nil || isNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionalLinkageItem) HasCondition() bool {
	if o != nil && !isNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given LinkageCondition and assigns it to the Condition field.
func (o *ConditionalLinkageItem) SetCondition(v LinkageCondition) {
	o.Condition = &v
}

func (o ConditionalLinkageItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalLinkageItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linkedTo"] = o.LinkedTo
	if !isNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return toSerialize, nil
}

type NullableConditionalLinkageItem struct {
	value *ConditionalLinkageItem
	isSet bool
}

func (v NullableConditionalLinkageItem) Get() *ConditionalLinkageItem {
	return v.value
}

func (v *NullableConditionalLinkageItem) Set(val *ConditionalLinkageItem) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalLinkageItem) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalLinkageItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalLinkageItem(val *ConditionalLinkageItem) *NullableConditionalLinkageItem {
	return &NullableConditionalLinkageItem{value: val, isSet: true}
}

func (v NullableConditionalLinkageItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalLinkageItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


