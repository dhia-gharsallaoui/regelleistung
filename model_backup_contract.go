/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BackupContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupContract{}

// BackupContract Representation of backup contract.
type BackupContract struct {
	// ID of a resource.
	Id string `json:"id"`
	ProductType *ProductType `json:"productType,omitempty"`
	BackupProvider *BalancingServiceProvider `json:"backupProvider,omitempty"`
	BackedUpProvider *BalancingServiceProvider `json:"backedUpProvider,omitempty"`
	ValidityPeriod *ContractValidityPeriod `json:"validityPeriod,omitempty"`
}

// NewBackupContract instantiates a new BackupContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupContract(id string) *BackupContract {
	this := BackupContract{}
	this.Id = id
	return &this
}

// NewBackupContractWithDefaults instantiates a new BackupContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupContractWithDefaults() *BackupContract {
	this := BackupContract{}
	return &this
}

// GetId returns the Id field value
func (o *BackupContract) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackupContract) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackupContract) SetId(v string) {
	o.Id = v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *BackupContract) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupContract) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *BackupContract) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *BackupContract) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetBackupProvider returns the BackupProvider field value if set, zero value otherwise.
func (o *BackupContract) GetBackupProvider() BalancingServiceProvider {
	if o == nil || isNil(o.BackupProvider) {
		var ret BalancingServiceProvider
		return ret
	}
	return *o.BackupProvider
}

// GetBackupProviderOk returns a tuple with the BackupProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupContract) GetBackupProviderOk() (*BalancingServiceProvider, bool) {
	if o == nil || isNil(o.BackupProvider) {
		return nil, false
	}
	return o.BackupProvider, true
}

// HasBackupProvider returns a boolean if a field has been set.
func (o *BackupContract) HasBackupProvider() bool {
	if o != nil && !isNil(o.BackupProvider) {
		return true
	}

	return false
}

// SetBackupProvider gets a reference to the given BalancingServiceProvider and assigns it to the BackupProvider field.
func (o *BackupContract) SetBackupProvider(v BalancingServiceProvider) {
	o.BackupProvider = &v
}

// GetBackedUpProvider returns the BackedUpProvider field value if set, zero value otherwise.
func (o *BackupContract) GetBackedUpProvider() BalancingServiceProvider {
	if o == nil || isNil(o.BackedUpProvider) {
		var ret BalancingServiceProvider
		return ret
	}
	return *o.BackedUpProvider
}

// GetBackedUpProviderOk returns a tuple with the BackedUpProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupContract) GetBackedUpProviderOk() (*BalancingServiceProvider, bool) {
	if o == nil || isNil(o.BackedUpProvider) {
		return nil, false
	}
	return o.BackedUpProvider, true
}

// HasBackedUpProvider returns a boolean if a field has been set.
func (o *BackupContract) HasBackedUpProvider() bool {
	if o != nil && !isNil(o.BackedUpProvider) {
		return true
	}

	return false
}

// SetBackedUpProvider gets a reference to the given BalancingServiceProvider and assigns it to the BackedUpProvider field.
func (o *BackupContract) SetBackedUpProvider(v BalancingServiceProvider) {
	o.BackedUpProvider = &v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *BackupContract) GetValidityPeriod() ContractValidityPeriod {
	if o == nil || isNil(o.ValidityPeriod) {
		var ret ContractValidityPeriod
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupContract) GetValidityPeriodOk() (*ContractValidityPeriod, bool) {
	if o == nil || isNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *BackupContract) HasValidityPeriod() bool {
	if o != nil && !isNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given ContractValidityPeriod and assigns it to the ValidityPeriod field.
func (o *BackupContract) SetValidityPeriod(v ContractValidityPeriod) {
	o.ValidityPeriod = &v
}

func (o BackupContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.BackupProvider) {
		toSerialize["backupProvider"] = o.BackupProvider
	}
	if !isNil(o.BackedUpProvider) {
		toSerialize["backedUpProvider"] = o.BackedUpProvider
	}
	if !isNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	return toSerialize, nil
}

type NullableBackupContract struct {
	value *BackupContract
	isSet bool
}

func (v NullableBackupContract) Get() *BackupContract {
	return v.value
}

func (v *NullableBackupContract) Set(val *BackupContract) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupContract) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupContract(val *BackupContract) *NullableBackupContract {
	return &NullableBackupContract{value: val, isSet: true}
}

func (v NullableBackupContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


