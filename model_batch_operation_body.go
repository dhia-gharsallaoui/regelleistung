/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BatchOperationBody - Request body. Required for PATCH and POST operations.
type BatchOperationBody struct {
	BidModification *BidModification
	BidSubmission *BidSubmission
}

// BidModificationAsBatchOperationBody is a convenience function that returns BidModification wrapped in BatchOperationBody
func BidModificationAsBatchOperationBody(v *BidModification) BatchOperationBody {
	return BatchOperationBody{
		BidModification: v,
	}
}

// BidSubmissionAsBatchOperationBody is a convenience function that returns BidSubmission wrapped in BatchOperationBody
func BidSubmissionAsBatchOperationBody(v *BidSubmission) BatchOperationBody {
	return BatchOperationBody{
		BidSubmission: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BatchOperationBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BidModification
	err = newStrictDecoder(data).Decode(&dst.BidModification)
	if err == nil {
		jsonBidModification, _ := json.Marshal(dst.BidModification)
		if string(jsonBidModification) == "{}" { // empty struct
			dst.BidModification = nil
		} else {
			match++
		}
	} else {
		dst.BidModification = nil
	}

	// try to unmarshal data into BidSubmission
	err = newStrictDecoder(data).Decode(&dst.BidSubmission)
	if err == nil {
		jsonBidSubmission, _ := json.Marshal(dst.BidSubmission)
		if string(jsonBidSubmission) == "{}" { // empty struct
			dst.BidSubmission = nil
		} else {
			match++
		}
	} else {
		dst.BidSubmission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BidModification = nil
		dst.BidSubmission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BatchOperationBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BatchOperationBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BatchOperationBody) MarshalJSON() ([]byte, error) {
	if src.BidModification != nil {
		return json.Marshal(&src.BidModification)
	}

	if src.BidSubmission != nil {
		return json.Marshal(&src.BidSubmission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BatchOperationBody) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BidModification != nil {
		return obj.BidModification
	}

	if obj.BidSubmission != nil {
		return obj.BidSubmission
	}

	// all schemas are nil
	return nil
}

type NullableBatchOperationBody struct {
	value *BatchOperationBody
	isSet bool
}

func (v NullableBatchOperationBody) Get() *BatchOperationBody {
	return v.value
}

func (v *NullableBatchOperationBody) Set(val *BatchOperationBody) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchOperationBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchOperationBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchOperationBody(val *BatchOperationBody) *NullableBatchOperationBody {
	return &NullableBatchOperationBody{value: val, isSet: true}
}

func (v NullableBatchOperationBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchOperationBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


