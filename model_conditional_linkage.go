/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConditionalLinkage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalLinkage{}

// ConditionalLinkage struct for ConditionalLinkage
type ConditionalLinkage struct {
	Links []ConditionalLinkageItem `json:"links"`
}

// NewConditionalLinkage instantiates a new ConditionalLinkage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalLinkage(links []ConditionalLinkageItem) *ConditionalLinkage {
	this := ConditionalLinkage{}
	this.Links = links
	return &this
}

// NewConditionalLinkageWithDefaults instantiates a new ConditionalLinkage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalLinkageWithDefaults() *ConditionalLinkage {
	this := ConditionalLinkage{}
	return &this
}

// GetLinks returns the Links field value
func (o *ConditionalLinkage) GetLinks() []ConditionalLinkageItem {
	if o == nil {
		var ret []ConditionalLinkageItem
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ConditionalLinkage) GetLinksOk() ([]ConditionalLinkageItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ConditionalLinkage) SetLinks(v []ConditionalLinkageItem) {
	o.Links = v
}

func (o ConditionalLinkage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalLinkage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

type NullableConditionalLinkage struct {
	value *ConditionalLinkage
	isSet bool
}

func (v NullableConditionalLinkage) Get() *ConditionalLinkage {
	return v.value
}

func (v *NullableConditionalLinkage) Set(val *ConditionalLinkage) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalLinkage) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalLinkage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalLinkage(val *ConditionalLinkage) *NullableConditionalLinkage {
	return &NullableConditionalLinkage{value: val, isSet: true}
}

func (v NullableConditionalLinkage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalLinkage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


