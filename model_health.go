/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Health type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Health{}

// Health API health indicator. Provides information about the current availability of base functions of the IP RL platform.
type Health struct {
	BiddingCapacityMarket *HealthState `json:"bidding-capacity-market,omitempty"`
	BiddingEnergyMarket *HealthState `json:"bidding-energy-market,omitempty"`
	TendersDataAccess *HealthState `json:"tenders-data-access,omitempty"`
	ResultsDataAccess *HealthState `json:"results-data-access,omitempty"`
	DocumentsDataAccess *HealthState `json:"documents-data-access,omitempty"`
	BspDataAccess *HealthState `json:"bsp-data-access,omitempty"`
}

// NewHealth instantiates a new Health object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealth() *Health {
	this := Health{}
	return &this
}

// NewHealthWithDefaults instantiates a new Health object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthWithDefaults() *Health {
	this := Health{}
	return &this
}

// GetBiddingCapacityMarket returns the BiddingCapacityMarket field value if set, zero value otherwise.
func (o *Health) GetBiddingCapacityMarket() HealthState {
	if o == nil || isNil(o.BiddingCapacityMarket) {
		var ret HealthState
		return ret
	}
	return *o.BiddingCapacityMarket
}

// GetBiddingCapacityMarketOk returns a tuple with the BiddingCapacityMarket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetBiddingCapacityMarketOk() (*HealthState, bool) {
	if o == nil || isNil(o.BiddingCapacityMarket) {
		return nil, false
	}
	return o.BiddingCapacityMarket, true
}

// HasBiddingCapacityMarket returns a boolean if a field has been set.
func (o *Health) HasBiddingCapacityMarket() bool {
	if o != nil && !isNil(o.BiddingCapacityMarket) {
		return true
	}

	return false
}

// SetBiddingCapacityMarket gets a reference to the given HealthState and assigns it to the BiddingCapacityMarket field.
func (o *Health) SetBiddingCapacityMarket(v HealthState) {
	o.BiddingCapacityMarket = &v
}

// GetBiddingEnergyMarket returns the BiddingEnergyMarket field value if set, zero value otherwise.
func (o *Health) GetBiddingEnergyMarket() HealthState {
	if o == nil || isNil(o.BiddingEnergyMarket) {
		var ret HealthState
		return ret
	}
	return *o.BiddingEnergyMarket
}

// GetBiddingEnergyMarketOk returns a tuple with the BiddingEnergyMarket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetBiddingEnergyMarketOk() (*HealthState, bool) {
	if o == nil || isNil(o.BiddingEnergyMarket) {
		return nil, false
	}
	return o.BiddingEnergyMarket, true
}

// HasBiddingEnergyMarket returns a boolean if a field has been set.
func (o *Health) HasBiddingEnergyMarket() bool {
	if o != nil && !isNil(o.BiddingEnergyMarket) {
		return true
	}

	return false
}

// SetBiddingEnergyMarket gets a reference to the given HealthState and assigns it to the BiddingEnergyMarket field.
func (o *Health) SetBiddingEnergyMarket(v HealthState) {
	o.BiddingEnergyMarket = &v
}

// GetTendersDataAccess returns the TendersDataAccess field value if set, zero value otherwise.
func (o *Health) GetTendersDataAccess() HealthState {
	if o == nil || isNil(o.TendersDataAccess) {
		var ret HealthState
		return ret
	}
	return *o.TendersDataAccess
}

// GetTendersDataAccessOk returns a tuple with the TendersDataAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetTendersDataAccessOk() (*HealthState, bool) {
	if o == nil || isNil(o.TendersDataAccess) {
		return nil, false
	}
	return o.TendersDataAccess, true
}

// HasTendersDataAccess returns a boolean if a field has been set.
func (o *Health) HasTendersDataAccess() bool {
	if o != nil && !isNil(o.TendersDataAccess) {
		return true
	}

	return false
}

// SetTendersDataAccess gets a reference to the given HealthState and assigns it to the TendersDataAccess field.
func (o *Health) SetTendersDataAccess(v HealthState) {
	o.TendersDataAccess = &v
}

// GetResultsDataAccess returns the ResultsDataAccess field value if set, zero value otherwise.
func (o *Health) GetResultsDataAccess() HealthState {
	if o == nil || isNil(o.ResultsDataAccess) {
		var ret HealthState
		return ret
	}
	return *o.ResultsDataAccess
}

// GetResultsDataAccessOk returns a tuple with the ResultsDataAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetResultsDataAccessOk() (*HealthState, bool) {
	if o == nil || isNil(o.ResultsDataAccess) {
		return nil, false
	}
	return o.ResultsDataAccess, true
}

// HasResultsDataAccess returns a boolean if a field has been set.
func (o *Health) HasResultsDataAccess() bool {
	if o != nil && !isNil(o.ResultsDataAccess) {
		return true
	}

	return false
}

// SetResultsDataAccess gets a reference to the given HealthState and assigns it to the ResultsDataAccess field.
func (o *Health) SetResultsDataAccess(v HealthState) {
	o.ResultsDataAccess = &v
}

// GetDocumentsDataAccess returns the DocumentsDataAccess field value if set, zero value otherwise.
func (o *Health) GetDocumentsDataAccess() HealthState {
	if o == nil || isNil(o.DocumentsDataAccess) {
		var ret HealthState
		return ret
	}
	return *o.DocumentsDataAccess
}

// GetDocumentsDataAccessOk returns a tuple with the DocumentsDataAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetDocumentsDataAccessOk() (*HealthState, bool) {
	if o == nil || isNil(o.DocumentsDataAccess) {
		return nil, false
	}
	return o.DocumentsDataAccess, true
}

// HasDocumentsDataAccess returns a boolean if a field has been set.
func (o *Health) HasDocumentsDataAccess() bool {
	if o != nil && !isNil(o.DocumentsDataAccess) {
		return true
	}

	return false
}

// SetDocumentsDataAccess gets a reference to the given HealthState and assigns it to the DocumentsDataAccess field.
func (o *Health) SetDocumentsDataAccess(v HealthState) {
	o.DocumentsDataAccess = &v
}

// GetBspDataAccess returns the BspDataAccess field value if set, zero value otherwise.
func (o *Health) GetBspDataAccess() HealthState {
	if o == nil || isNil(o.BspDataAccess) {
		var ret HealthState
		return ret
	}
	return *o.BspDataAccess
}

// GetBspDataAccessOk returns a tuple with the BspDataAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetBspDataAccessOk() (*HealthState, bool) {
	if o == nil || isNil(o.BspDataAccess) {
		return nil, false
	}
	return o.BspDataAccess, true
}

// HasBspDataAccess returns a boolean if a field has been set.
func (o *Health) HasBspDataAccess() bool {
	if o != nil && !isNil(o.BspDataAccess) {
		return true
	}

	return false
}

// SetBspDataAccess gets a reference to the given HealthState and assigns it to the BspDataAccess field.
func (o *Health) SetBspDataAccess(v HealthState) {
	o.BspDataAccess = &v
}

func (o Health) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Health) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BiddingCapacityMarket) {
		toSerialize["bidding-capacity-market"] = o.BiddingCapacityMarket
	}
	if !isNil(o.BiddingEnergyMarket) {
		toSerialize["bidding-energy-market"] = o.BiddingEnergyMarket
	}
	if !isNil(o.TendersDataAccess) {
		toSerialize["tenders-data-access"] = o.TendersDataAccess
	}
	if !isNil(o.ResultsDataAccess) {
		toSerialize["results-data-access"] = o.ResultsDataAccess
	}
	if !isNil(o.DocumentsDataAccess) {
		toSerialize["documents-data-access"] = o.DocumentsDataAccess
	}
	if !isNil(o.BspDataAccess) {
		toSerialize["bsp-data-access"] = o.BspDataAccess
	}
	return toSerialize, nil
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


