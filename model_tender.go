/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Tender type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tender{}

// Tender Common representation of capacity/energy market tenders.
type Tender struct {
	// The tender identification is structured as follows:   `[productType]-[deliveryDate]-[market]-[sequenceNumber]`    * `productType` - one of `fcr`, `afrr` or `mfrr`   * `deliveryDate` - ISO 8601 date   * `market` - one of `cm`(capacity market) or `em`(energy market)   * `sequenceNumber` - An ascending number for the identification of different tender runs or time slices.   For more details on the new tender id format, see the [reference guide.](/docs/guide#tender-id). 
	Id *string `json:"id,omitempty"`
	ProductType *ProductType `json:"productType,omitempty"`
	// Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).
	DeliveryDate *string `json:"deliveryDate,omitempty"`
	Market *ReserveMarket `json:"market,omitempty"`
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`
	// Gate open time of tender.
	GateOpenTime *time.Time `json:"gateOpenTime,omitempty"`
	// Gate closure time of tender.
	GateClosureTime *time.Time `json:"gateClosureTime,omitempty"`
	// Actual state of the tender. For detailed information on the tender state model, see the [reference guide.](/docs/guide#tender-state-model)
	State *string `json:"state,omitempty"`
	// Result of the tender. For detailed information on the specific tender results, see the [reference guide.](/docs/guide#tender-state-model)
	Result *string `json:"result,omitempty"`
	RunNumber NullableInt32 `json:"runNumber,omitempty"`
	// Available products for tender.
	Products []ProductName `json:"products,omitempty"`
	// Key to identify the current business rules for bidding. For detailed information, see the [reference guide.](/docs/guide#business-rules-key)
	BusinessRulesKey *string `json:"businessRulesKey,omitempty"`
}

// NewTender instantiates a new Tender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTender() *Tender {
	this := Tender{}
	return &this
}

// NewTenderWithDefaults instantiates a new Tender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenderWithDefaults() *Tender {
	this := Tender{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Tender) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Tender) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Tender) SetId(v string) {
	o.Id = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *Tender) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *Tender) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *Tender) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *Tender) GetDeliveryDate() string {
	if o == nil || isNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetDeliveryDateOk() (*string, bool) {
	if o == nil || isNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *Tender) HasDeliveryDate() bool {
	if o != nil && !isNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *Tender) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *Tender) GetMarket() ReserveMarket {
	if o == nil || isNil(o.Market) {
		var ret ReserveMarket
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil || isNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *Tender) HasMarket() bool {
	if o != nil && !isNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given ReserveMarket and assigns it to the Market field.
func (o *Tender) SetMarket(v ReserveMarket) {
	o.Market = &v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *Tender) GetTimeInterval() TimeInterval {
	if o == nil || isNil(o.TimeInterval) {
		var ret TimeInterval
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetTimeIntervalOk() (*TimeInterval, bool) {
	if o == nil || isNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *Tender) HasTimeInterval() bool {
	if o != nil && !isNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given TimeInterval and assigns it to the TimeInterval field.
func (o *Tender) SetTimeInterval(v TimeInterval) {
	o.TimeInterval = &v
}

// GetGateOpenTime returns the GateOpenTime field value if set, zero value otherwise.
func (o *Tender) GetGateOpenTime() time.Time {
	if o == nil || isNil(o.GateOpenTime) {
		var ret time.Time
		return ret
	}
	return *o.GateOpenTime
}

// GetGateOpenTimeOk returns a tuple with the GateOpenTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetGateOpenTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.GateOpenTime) {
		return nil, false
	}
	return o.GateOpenTime, true
}

// HasGateOpenTime returns a boolean if a field has been set.
func (o *Tender) HasGateOpenTime() bool {
	if o != nil && !isNil(o.GateOpenTime) {
		return true
	}

	return false
}

// SetGateOpenTime gets a reference to the given time.Time and assigns it to the GateOpenTime field.
func (o *Tender) SetGateOpenTime(v time.Time) {
	o.GateOpenTime = &v
}

// GetGateClosureTime returns the GateClosureTime field value if set, zero value otherwise.
func (o *Tender) GetGateClosureTime() time.Time {
	if o == nil || isNil(o.GateClosureTime) {
		var ret time.Time
		return ret
	}
	return *o.GateClosureTime
}

// GetGateClosureTimeOk returns a tuple with the GateClosureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetGateClosureTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.GateClosureTime) {
		return nil, false
	}
	return o.GateClosureTime, true
}

// HasGateClosureTime returns a boolean if a field has been set.
func (o *Tender) HasGateClosureTime() bool {
	if o != nil && !isNil(o.GateClosureTime) {
		return true
	}

	return false
}

// SetGateClosureTime gets a reference to the given time.Time and assigns it to the GateClosureTime field.
func (o *Tender) SetGateClosureTime(v time.Time) {
	o.GateClosureTime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Tender) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Tender) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Tender) SetState(v string) {
	o.State = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Tender) GetResult() string {
	if o == nil || isNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetResultOk() (*string, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Tender) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *Tender) SetResult(v string) {
	o.Result = &v
}

// GetRunNumber returns the RunNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tender) GetRunNumber() int32 {
	if o == nil || isNil(o.RunNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.RunNumber.Get()
}

// GetRunNumberOk returns a tuple with the RunNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tender) GetRunNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunNumber.Get(), o.RunNumber.IsSet()
}

// HasRunNumber returns a boolean if a field has been set.
func (o *Tender) HasRunNumber() bool {
	if o != nil && o.RunNumber.IsSet() {
		return true
	}

	return false
}

// SetRunNumber gets a reference to the given NullableInt32 and assigns it to the RunNumber field.
func (o *Tender) SetRunNumber(v int32) {
	o.RunNumber.Set(&v)
}
// SetRunNumberNil sets the value for RunNumber to be an explicit nil
func (o *Tender) SetRunNumberNil() {
	o.RunNumber.Set(nil)
}

// UnsetRunNumber ensures that no value is present for RunNumber, not even an explicit nil
func (o *Tender) UnsetRunNumber() {
	o.RunNumber.Unset()
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *Tender) GetProducts() []ProductName {
	if o == nil || isNil(o.Products) {
		var ret []ProductName
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetProductsOk() ([]ProductName, bool) {
	if o == nil || isNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *Tender) HasProducts() bool {
	if o != nil && !isNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []ProductName and assigns it to the Products field.
func (o *Tender) SetProducts(v []ProductName) {
	o.Products = v
}

// GetBusinessRulesKey returns the BusinessRulesKey field value if set, zero value otherwise.
func (o *Tender) GetBusinessRulesKey() string {
	if o == nil || isNil(o.BusinessRulesKey) {
		var ret string
		return ret
	}
	return *o.BusinessRulesKey
}

// GetBusinessRulesKeyOk returns a tuple with the BusinessRulesKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tender) GetBusinessRulesKeyOk() (*string, bool) {
	if o == nil || isNil(o.BusinessRulesKey) {
		return nil, false
	}
	return o.BusinessRulesKey, true
}

// HasBusinessRulesKey returns a boolean if a field has been set.
func (o *Tender) HasBusinessRulesKey() bool {
	if o != nil && !isNil(o.BusinessRulesKey) {
		return true
	}

	return false
}

// SetBusinessRulesKey gets a reference to the given string and assigns it to the BusinessRulesKey field.
func (o *Tender) SetBusinessRulesKey(v string) {
	o.BusinessRulesKey = &v
}

func (o Tender) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tender) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !isNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !isNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if !isNil(o.GateOpenTime) {
		toSerialize["gateOpenTime"] = o.GateOpenTime
	}
	if !isNil(o.GateClosureTime) {
		toSerialize["gateClosureTime"] = o.GateClosureTime
	}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if o.RunNumber.IsSet() {
		toSerialize["runNumber"] = o.RunNumber.Get()
	}
	if !isNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !isNil(o.BusinessRulesKey) {
		toSerialize["businessRulesKey"] = o.BusinessRulesKey
	}
	return toSerialize, nil
}

type NullableTender struct {
	value *Tender
	isSet bool
}

func (v NullableTender) Get() *Tender {
	return v.value
}

func (v *NullableTender) Set(val *Tender) {
	v.value = val
	v.isSet = true
}

func (v NullableTender) IsSet() bool {
	return v.isSet
}

func (v *NullableTender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTender(val *Tender) *NullableTender {
	return &NullableTender{value: val, isSet: true}
}

func (v NullableTender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


