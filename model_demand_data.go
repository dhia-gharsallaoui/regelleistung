/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DemandData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DemandData{}

// DemandData struct for DemandData
type DemandData struct {
	Demand *int32 `json:"demand,omitempty"`
	MaxExport NullableInt32 `json:"maxExport,omitempty"`
	CoreShare NullableInt32 `json:"coreShare,omitempty"`
}

// NewDemandData instantiates a new DemandData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemandData() *DemandData {
	this := DemandData{}
	return &this
}

// NewDemandDataWithDefaults instantiates a new DemandData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemandDataWithDefaults() *DemandData {
	this := DemandData{}
	return &this
}

// GetDemand returns the Demand field value if set, zero value otherwise.
func (o *DemandData) GetDemand() int32 {
	if o == nil || isNil(o.Demand) {
		var ret int32
		return ret
	}
	return *o.Demand
}

// GetDemandOk returns a tuple with the Demand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemandData) GetDemandOk() (*int32, bool) {
	if o == nil || isNil(o.Demand) {
		return nil, false
	}
	return o.Demand, true
}

// HasDemand returns a boolean if a field has been set.
func (o *DemandData) HasDemand() bool {
	if o != nil && !isNil(o.Demand) {
		return true
	}

	return false
}

// SetDemand gets a reference to the given int32 and assigns it to the Demand field.
func (o *DemandData) SetDemand(v int32) {
	o.Demand = &v
}

// GetMaxExport returns the MaxExport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DemandData) GetMaxExport() int32 {
	if o == nil || isNil(o.MaxExport.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxExport.Get()
}

// GetMaxExportOk returns a tuple with the MaxExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DemandData) GetMaxExportOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxExport.Get(), o.MaxExport.IsSet()
}

// HasMaxExport returns a boolean if a field has been set.
func (o *DemandData) HasMaxExport() bool {
	if o != nil && o.MaxExport.IsSet() {
		return true
	}

	return false
}

// SetMaxExport gets a reference to the given NullableInt32 and assigns it to the MaxExport field.
func (o *DemandData) SetMaxExport(v int32) {
	o.MaxExport.Set(&v)
}
// SetMaxExportNil sets the value for MaxExport to be an explicit nil
func (o *DemandData) SetMaxExportNil() {
	o.MaxExport.Set(nil)
}

// UnsetMaxExport ensures that no value is present for MaxExport, not even an explicit nil
func (o *DemandData) UnsetMaxExport() {
	o.MaxExport.Unset()
}

// GetCoreShare returns the CoreShare field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DemandData) GetCoreShare() int32 {
	if o == nil || isNil(o.CoreShare.Get()) {
		var ret int32
		return ret
	}
	return *o.CoreShare.Get()
}

// GetCoreShareOk returns a tuple with the CoreShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DemandData) GetCoreShareOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoreShare.Get(), o.CoreShare.IsSet()
}

// HasCoreShare returns a boolean if a field has been set.
func (o *DemandData) HasCoreShare() bool {
	if o != nil && o.CoreShare.IsSet() {
		return true
	}

	return false
}

// SetCoreShare gets a reference to the given NullableInt32 and assigns it to the CoreShare field.
func (o *DemandData) SetCoreShare(v int32) {
	o.CoreShare.Set(&v)
}
// SetCoreShareNil sets the value for CoreShare to be an explicit nil
func (o *DemandData) SetCoreShareNil() {
	o.CoreShare.Set(nil)
}

// UnsetCoreShare ensures that no value is present for CoreShare, not even an explicit nil
func (o *DemandData) UnsetCoreShare() {
	o.CoreShare.Unset()
}

func (o DemandData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DemandData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Demand) {
		toSerialize["demand"] = o.Demand
	}
	if o.MaxExport.IsSet() {
		toSerialize["maxExport"] = o.MaxExport.Get()
	}
	if o.CoreShare.IsSet() {
		toSerialize["coreShare"] = o.CoreShare.Get()
	}
	return toSerialize, nil
}

type NullableDemandData struct {
	value *DemandData
	isSet bool
}

func (v NullableDemandData) Get() *DemandData {
	return v.value
}

func (v *NullableDemandData) Set(val *DemandData) {
	v.value = val
	v.isSet = true
}

func (v NullableDemandData) IsSet() bool {
	return v.isSet
}

func (v *NullableDemandData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemandData(val *DemandData) *NullableDemandData {
	return &NullableDemandData{value: val, isSet: true}
}

func (v NullableDemandData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemandData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


