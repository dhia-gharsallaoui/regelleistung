/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ResultsApiService ResultsApi service
type ResultsApiService service

type ApiGetAllocationResultsRequest struct {
	ctx context.Context
	ApiService *ResultsApiService
	deliveryDate *string
	market *ReserveMarket
	tender *string
	productType *ProductType
	productName *ProductName
	state *string
	zone *string
	offset *int32
	limit *int32
}

// Only results for the specified delivery date will be listed (ISO 8601 format YYYY-MM-DD). If not specified and also no tender ID is specified, then only results for today&#39;s delivery day will be listed.
func (r ApiGetAllocationResultsRequest) DeliveryDate(deliveryDate string) ApiGetAllocationResultsRequest {
	r.deliveryDate = &deliveryDate
	return r
}

// Market filter. If not specified and also no tender ID is specified, then only bids for capacity market will be listed.
func (r ApiGetAllocationResultsRequest) Market(market ReserveMarket) ApiGetAllocationResultsRequest {
	r.market = &market
	return r
}

// By specifying the tender ID, only results of this tender will be listed.
func (r ApiGetAllocationResultsRequest) Tender(tender string) ApiGetAllocationResultsRequest {
	r.tender = &tender
	return r
}

// Product type filter. If this query parameter is not set and also no tender ID is specified, results for all product types are returned.
func (r ApiGetAllocationResultsRequest) ProductType(productType ProductType) ApiGetAllocationResultsRequest {
	r.productType = &productType
	return r
}

func (r ApiGetAllocationResultsRequest) ProductName(productName ProductName) ApiGetAllocationResultsRequest {
	r.productName = &productName
	return r
}

func (r ApiGetAllocationResultsRequest) State(state string) ApiGetAllocationResultsRequest {
	r.state = &state
	return r
}

func (r ApiGetAllocationResultsRequest) Zone(zone string) ApiGetAllocationResultsRequest {
	r.zone = &zone
	return r
}

// The number of items to skip before starting to collect the result set.
func (r ApiGetAllocationResultsRequest) Offset(offset int32) ApiGetAllocationResultsRequest {
	r.offset = &offset
	return r
}

// The numbers of items to return
func (r ApiGetAllocationResultsRequest) Limit(limit int32) ApiGetAllocationResultsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetAllocationResultsRequest) Execute() ([]AllocationResultElement, *http.Response, error) {
	return r.ApiService.GetAllocationResultsExecute(r)
}

/*
GetAllocationResults Anonymous results

Returns the anonymous results of allocated tenders sorted in the following order:
  * `market`,
  * `productType`,
  * `productName`,
  * `allocationRanking`

The result list can be reduced as required by specifying combinations of different filter parameters.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllocationResultsRequest
*/
func (a *ResultsApiService) GetAllocationResults(ctx context.Context) ApiGetAllocationResultsRequest {
	return ApiGetAllocationResultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AllocationResultElement
func (a *ResultsApiService) GetAllocationResultsExecute(r ApiGetAllocationResultsRequest) ([]AllocationResultElement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AllocationResultElement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResultsApiService.GetAllocationResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/results"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deliveryDate != nil {
		parameterAddToQuery(localVarQueryParams, "delivery-date", r.deliveryDate, "")
	}
	if r.market != nil {
		parameterAddToQuery(localVarQueryParams, "market", r.market, "")
	}
	if r.tender != nil {
		parameterAddToQuery(localVarQueryParams, "tender", r.tender, "")
	}
	if r.productType != nil {
		parameterAddToQuery(localVarQueryParams, "product-type", r.productType, "")
	}
	if r.productName != nil {
		parameterAddToQuery(localVarQueryParams, "product-name", r.productName, "")
	}
	if r.state != nil {
		parameterAddToQuery(localVarQueryParams, "state", r.state, "")
	}
	if r.zone != nil {
		parameterAddToQuery(localVarQueryParams, "zone", r.zone, "")
	}
	if r.offset != nil {
		parameterAddToQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
