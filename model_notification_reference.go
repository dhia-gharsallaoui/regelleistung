/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationReference{}

// NotificationReference Elements for assigning the notifaction to the specific business process.
type NotificationReference struct {
	ProductType *ProductType `json:"productType,omitempty"`
	// Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).
	DeliveryDate *string `json:"deliveryDate,omitempty"`
	Market *ReserveMarket `json:"market,omitempty"`
	// The tender identification is structured as follows:   `[productType]-[deliveryDate]-[market]-[sequenceNumber]`    * `productType` - one of `fcr`, `afrr` or `mfrr`   * `deliveryDate` - ISO 8601 date   * `market` - one of `cm`(capacity market) or `em`(energy market)   * `sequenceNumber` - An ascending number for the identification of different tender runs or time slices.   For more details on the new tender id format, see the [reference guide.](/docs/guide#tender-id). 
	Tender *string `json:"tender,omitempty"`
	Products []ProductName `json:"products,omitempty"`
}

// NewNotificationReference instantiates a new NotificationReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationReference() *NotificationReference {
	this := NotificationReference{}
	return &this
}

// NewNotificationReferenceWithDefaults instantiates a new NotificationReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationReferenceWithDefaults() *NotificationReference {
	this := NotificationReference{}
	return &this
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *NotificationReference) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationReference) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *NotificationReference) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *NotificationReference) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *NotificationReference) GetDeliveryDate() string {
	if o == nil || isNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationReference) GetDeliveryDateOk() (*string, bool) {
	if o == nil || isNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *NotificationReference) HasDeliveryDate() bool {
	if o != nil && !isNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *NotificationReference) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *NotificationReference) GetMarket() ReserveMarket {
	if o == nil || isNil(o.Market) {
		var ret ReserveMarket
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationReference) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil || isNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *NotificationReference) HasMarket() bool {
	if o != nil && !isNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given ReserveMarket and assigns it to the Market field.
func (o *NotificationReference) SetMarket(v ReserveMarket) {
	o.Market = &v
}

// GetTender returns the Tender field value if set, zero value otherwise.
func (o *NotificationReference) GetTender() string {
	if o == nil || isNil(o.Tender) {
		var ret string
		return ret
	}
	return *o.Tender
}

// GetTenderOk returns a tuple with the Tender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationReference) GetTenderOk() (*string, bool) {
	if o == nil || isNil(o.Tender) {
		return nil, false
	}
	return o.Tender, true
}

// HasTender returns a boolean if a field has been set.
func (o *NotificationReference) HasTender() bool {
	if o != nil && !isNil(o.Tender) {
		return true
	}

	return false
}

// SetTender gets a reference to the given string and assigns it to the Tender field.
func (o *NotificationReference) SetTender(v string) {
	o.Tender = &v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *NotificationReference) GetProducts() []ProductName {
	if o == nil || isNil(o.Products) {
		var ret []ProductName
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationReference) GetProductsOk() ([]ProductName, bool) {
	if o == nil || isNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *NotificationReference) HasProducts() bool {
	if o != nil && !isNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []ProductName and assigns it to the Products field.
func (o *NotificationReference) SetProducts(v []ProductName) {
	o.Products = v
}

func (o NotificationReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !isNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	// skip: tender is readOnly
	if !isNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	return toSerialize, nil
}

type NullableNotificationReference struct {
	value *NotificationReference
	isSet bool
}

func (v NullableNotificationReference) Get() *NotificationReference {
	return v.value
}

func (v *NullableNotificationReference) Set(val *NotificationReference) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationReference) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationReference(val *NotificationReference) *NullableNotificationReference {
	return &NullableNotificationReference{value: val, isSet: true}
}

func (v NullableNotificationReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


