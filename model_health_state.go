/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HealthState Health endpoint state.
type HealthState string

// List of HealthState
const (
	UP HealthState = "UP"
	DOWN HealthState = "DOWN"
)

// All allowed values of HealthState enum
var AllowedHealthStateEnumValues = []HealthState{
	"UP",
	"DOWN",
}

func (v *HealthState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HealthState(value)
	for _, existing := range AllowedHealthStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HealthState", value)
}

// NewHealthStateFromValue returns a pointer to a valid HealthState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthStateFromValue(v string) (*HealthState, error) {
	ev := HealthState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HealthState: valid values are %v", v, AllowedHealthStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HealthState) IsValid() bool {
	for _, existing := range AllowedHealthStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HealthState value
func (v HealthState) Ptr() *HealthState {
	return &v
}

type NullableHealthState struct {
	value *HealthState
	isSet bool
}

func (v NullableHealthState) Get() *HealthState {
	return v.value
}

func (v *NullableHealthState) Set(val *HealthState) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthState) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthState(val *HealthState) *NullableHealthState {
	return &NullableHealthState{value: val, isSet: true}
}

func (v NullableHealthState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

