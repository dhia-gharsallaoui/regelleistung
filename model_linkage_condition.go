/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LinkageCondition The following conditions are allowed:   * `LC_01` - if linked bid in earlier MTU period is activated, the current bid is unavailable,   * `LC_02` - if linked bid in earlier MTU period is activated in scheduled activation (SA), the current bid is unavailable,   * `LC_03` - if linked bid in earlier MTU period is activated in SA, the current bid is unavailable for direct activation (DA),   * `LC_04` - if linked bid in earlier MTU period is activated in DA, the current bid is unavailable,   * `LC_05` - if linked bid in earlier MTU period is activated in DA, the current bid is unavailable for DA or   * `LC_06` - if linked bid in earlier MTU period is **not activated**, the current bid is unavailable. 
type LinkageCondition string

// List of LinkageCondition
const (
	_01 LinkageCondition = "LC_01"
	_02 LinkageCondition = "LC_02"
	_03 LinkageCondition = "LC_03"
	_04 LinkageCondition = "LC_04"
	_05 LinkageCondition = "LC_05"
	_06 LinkageCondition = "LC_06"
)

// All allowed values of LinkageCondition enum
var AllowedLinkageConditionEnumValues = []LinkageCondition{
	"LC_01",
	"LC_02",
	"LC_03",
	"LC_04",
	"LC_05",
	"LC_06",
}

func (v *LinkageCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkageCondition(value)
	for _, existing := range AllowedLinkageConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkageCondition", value)
}

// NewLinkageConditionFromValue returns a pointer to a valid LinkageCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkageConditionFromValue(v string) (*LinkageCondition, error) {
	ev := LinkageCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkageCondition: valid values are %v", v, AllowedLinkageConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkageCondition) IsValid() bool {
	for _, existing := range AllowedLinkageConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkageCondition value
func (v LinkageCondition) Ptr() *LinkageCondition {
	return &v
}

type NullableLinkageCondition struct {
	value *LinkageCondition
	isSet bool
}

func (v NullableLinkageCondition) Get() *LinkageCondition {
	return v.value
}

func (v *NullableLinkageCondition) Set(val *LinkageCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkageCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkageCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkageCondition(val *LinkageCondition) *NullableLinkageCondition {
	return &NullableLinkageCondition{value: val, isSet: true}
}

func (v NullableLinkageCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkageCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

