/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ComplexBid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComplexBid{}

// ComplexBid Complex bid
type ComplexBid struct {
	Market ReserveMarket `json:"market"`
	ProductType ProductType `json:"productType"`
	BidType BidType `json:"bidType"`
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`
	ConnectingZone *ConnectingZone `json:"connectingZone,omitempty"`
	Activation *ActivationType `json:"activation,omitempty"`
	TechnicalLinkage *TechnicalLinkage `json:"technicalLinkage,omitempty"`
	BackupFor *BalancingServiceProvider `json:"backupFor,omitempty"`
	// Custom tag for bids
	Tag *string `json:"tag,omitempty"`
	Components []ComplexBidComponent `json:"components"`
}

// NewComplexBid instantiates a new ComplexBid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComplexBid(market ReserveMarket, productType ProductType, bidType BidType, components []ComplexBidComponent) *ComplexBid {
	this := ComplexBid{}
	this.Market = market
	this.ProductType = productType
	this.BidType = bidType
	var activation ActivationType = DIRECT
	this.Activation = &activation
	this.Components = components
	return &this
}

// NewComplexBidWithDefaults instantiates a new ComplexBid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComplexBidWithDefaults() *ComplexBid {
	this := ComplexBid{}
	var bidType BidType = SIMPLE
	this.BidType = bidType
	var activation ActivationType = DIRECT
	this.Activation = &activation
	return &this
}

// GetMarket returns the Market field value
func (o *ComplexBid) GetMarket() ReserveMarket {
	if o == nil {
		var ret ReserveMarket
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *ComplexBid) SetMarket(v ReserveMarket) {
	o.Market = v
}

// GetProductType returns the ProductType field value
func (o *ComplexBid) GetProductType() ProductType {
	if o == nil {
		var ret ProductType
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetProductTypeOk() (*ProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *ComplexBid) SetProductType(v ProductType) {
	o.ProductType = v
}

// GetBidType returns the BidType field value
func (o *ComplexBid) GetBidType() BidType {
	if o == nil {
		var ret BidType
		return ret
	}

	return o.BidType
}

// GetBidTypeOk returns a tuple with the BidType field value
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetBidTypeOk() (*BidType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BidType, true
}

// SetBidType sets field value
func (o *ComplexBid) SetBidType(v BidType) {
	o.BidType = v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *ComplexBid) GetTimeInterval() TimeInterval {
	if o == nil || isNil(o.TimeInterval) {
		var ret TimeInterval
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetTimeIntervalOk() (*TimeInterval, bool) {
	if o == nil || isNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *ComplexBid) HasTimeInterval() bool {
	if o != nil && !isNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given TimeInterval and assigns it to the TimeInterval field.
func (o *ComplexBid) SetTimeInterval(v TimeInterval) {
	o.TimeInterval = &v
}

// GetConnectingZone returns the ConnectingZone field value if set, zero value otherwise.
func (o *ComplexBid) GetConnectingZone() ConnectingZone {
	if o == nil || isNil(o.ConnectingZone) {
		var ret ConnectingZone
		return ret
	}
	return *o.ConnectingZone
}

// GetConnectingZoneOk returns a tuple with the ConnectingZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetConnectingZoneOk() (*ConnectingZone, bool) {
	if o == nil || isNil(o.ConnectingZone) {
		return nil, false
	}
	return o.ConnectingZone, true
}

// HasConnectingZone returns a boolean if a field has been set.
func (o *ComplexBid) HasConnectingZone() bool {
	if o != nil && !isNil(o.ConnectingZone) {
		return true
	}

	return false
}

// SetConnectingZone gets a reference to the given ConnectingZone and assigns it to the ConnectingZone field.
func (o *ComplexBid) SetConnectingZone(v ConnectingZone) {
	o.ConnectingZone = &v
}

// GetActivation returns the Activation field value if set, zero value otherwise.
func (o *ComplexBid) GetActivation() ActivationType {
	if o == nil || isNil(o.Activation) {
		var ret ActivationType
		return ret
	}
	return *o.Activation
}

// GetActivationOk returns a tuple with the Activation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetActivationOk() (*ActivationType, bool) {
	if o == nil || isNil(o.Activation) {
		return nil, false
	}
	return o.Activation, true
}

// HasActivation returns a boolean if a field has been set.
func (o *ComplexBid) HasActivation() bool {
	if o != nil && !isNil(o.Activation) {
		return true
	}

	return false
}

// SetActivation gets a reference to the given ActivationType and assigns it to the Activation field.
func (o *ComplexBid) SetActivation(v ActivationType) {
	o.Activation = &v
}

// GetTechnicalLinkage returns the TechnicalLinkage field value if set, zero value otherwise.
func (o *ComplexBid) GetTechnicalLinkage() TechnicalLinkage {
	if o == nil || isNil(o.TechnicalLinkage) {
		var ret TechnicalLinkage
		return ret
	}
	return *o.TechnicalLinkage
}

// GetTechnicalLinkageOk returns a tuple with the TechnicalLinkage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetTechnicalLinkageOk() (*TechnicalLinkage, bool) {
	if o == nil || isNil(o.TechnicalLinkage) {
		return nil, false
	}
	return o.TechnicalLinkage, true
}

// HasTechnicalLinkage returns a boolean if a field has been set.
func (o *ComplexBid) HasTechnicalLinkage() bool {
	if o != nil && !isNil(o.TechnicalLinkage) {
		return true
	}

	return false
}

// SetTechnicalLinkage gets a reference to the given TechnicalLinkage and assigns it to the TechnicalLinkage field.
func (o *ComplexBid) SetTechnicalLinkage(v TechnicalLinkage) {
	o.TechnicalLinkage = &v
}

// GetBackupFor returns the BackupFor field value if set, zero value otherwise.
func (o *ComplexBid) GetBackupFor() BalancingServiceProvider {
	if o == nil || isNil(o.BackupFor) {
		var ret BalancingServiceProvider
		return ret
	}
	return *o.BackupFor
}

// GetBackupForOk returns a tuple with the BackupFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetBackupForOk() (*BalancingServiceProvider, bool) {
	if o == nil || isNil(o.BackupFor) {
		return nil, false
	}
	return o.BackupFor, true
}

// HasBackupFor returns a boolean if a field has been set.
func (o *ComplexBid) HasBackupFor() bool {
	if o != nil && !isNil(o.BackupFor) {
		return true
	}

	return false
}

// SetBackupFor gets a reference to the given BalancingServiceProvider and assigns it to the BackupFor field.
func (o *ComplexBid) SetBackupFor(v BalancingServiceProvider) {
	o.BackupFor = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ComplexBid) GetTag() string {
	if o == nil || isNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetTagOk() (*string, bool) {
	if o == nil || isNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ComplexBid) HasTag() bool {
	if o != nil && !isNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ComplexBid) SetTag(v string) {
	o.Tag = &v
}

// GetComponents returns the Components field value
func (o *ComplexBid) GetComponents() []ComplexBidComponent {
	if o == nil {
		var ret []ComplexBidComponent
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *ComplexBid) GetComponentsOk() ([]ComplexBidComponent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *ComplexBid) SetComponents(v []ComplexBidComponent) {
	o.Components = v
}

func (o ComplexBid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComplexBid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["market"] = o.Market
	toSerialize["productType"] = o.ProductType
	toSerialize["bidType"] = o.BidType
	if !isNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if !isNil(o.ConnectingZone) {
		toSerialize["connectingZone"] = o.ConnectingZone
	}
	if !isNil(o.Activation) {
		toSerialize["activation"] = o.Activation
	}
	if !isNil(o.TechnicalLinkage) {
		toSerialize["technicalLinkage"] = o.TechnicalLinkage
	}
	if !isNil(o.BackupFor) {
		toSerialize["backupFor"] = o.BackupFor
	}
	if !isNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["components"] = o.Components
	return toSerialize, nil
}

type NullableComplexBid struct {
	value *ComplexBid
	isSet bool
}

func (v NullableComplexBid) Get() *ComplexBid {
	return v.value
}

func (v *NullableComplexBid) Set(val *ComplexBid) {
	v.value = val
	v.isSet = true
}

func (v NullableComplexBid) IsSet() bool {
	return v.isSet
}

func (v *NullableComplexBid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComplexBid(val *ComplexBid) *NullableComplexBid {
	return &NullableComplexBid{value: val, isSet: true}
}

func (v NullableComplexBid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComplexBid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


