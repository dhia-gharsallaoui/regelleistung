/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BidSubmission - Submission of a simple/complex bid, a complex bid component or a bid group.
type BidSubmission struct {
	BidGroup *BidGroup
	ComplexBid *ComplexBid
	ComplexBidComponent *ComplexBidComponent
	SimpleBid *SimpleBid
}

// BidGroupAsBidSubmission is a convenience function that returns BidGroup wrapped in BidSubmission
func BidGroupAsBidSubmission(v *BidGroup) BidSubmission {
	return BidSubmission{
		BidGroup: v,
	}
}

// ComplexBidAsBidSubmission is a convenience function that returns ComplexBid wrapped in BidSubmission
func ComplexBidAsBidSubmission(v *ComplexBid) BidSubmission {
	return BidSubmission{
		ComplexBid: v,
	}
}

// ComplexBidComponentAsBidSubmission is a convenience function that returns ComplexBidComponent wrapped in BidSubmission
func ComplexBidComponentAsBidSubmission(v *ComplexBidComponent) BidSubmission {
	return BidSubmission{
		ComplexBidComponent: v,
	}
}

// SimpleBidAsBidSubmission is a convenience function that returns SimpleBid wrapped in BidSubmission
func SimpleBidAsBidSubmission(v *SimpleBid) BidSubmission {
	return BidSubmission{
		SimpleBid: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BidSubmission) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BidGroup
	err = newStrictDecoder(data).Decode(&dst.BidGroup)
	if err == nil {
		jsonBidGroup, _ := json.Marshal(dst.BidGroup)
		if string(jsonBidGroup) == "{}" { // empty struct
			dst.BidGroup = nil
		} else {
			match++
		}
	} else {
		dst.BidGroup = nil
	}

	// try to unmarshal data into ComplexBid
	err = newStrictDecoder(data).Decode(&dst.ComplexBid)
	if err == nil {
		jsonComplexBid, _ := json.Marshal(dst.ComplexBid)
		if string(jsonComplexBid) == "{}" { // empty struct
			dst.ComplexBid = nil
		} else {
			match++
		}
	} else {
		dst.ComplexBid = nil
	}

	// try to unmarshal data into ComplexBidComponent
	err = newStrictDecoder(data).Decode(&dst.ComplexBidComponent)
	if err == nil {
		jsonComplexBidComponent, _ := json.Marshal(dst.ComplexBidComponent)
		if string(jsonComplexBidComponent) == "{}" { // empty struct
			dst.ComplexBidComponent = nil
		} else {
			match++
		}
	} else {
		dst.ComplexBidComponent = nil
	}

	// try to unmarshal data into SimpleBid
	err = newStrictDecoder(data).Decode(&dst.SimpleBid)
	if err == nil {
		jsonSimpleBid, _ := json.Marshal(dst.SimpleBid)
		if string(jsonSimpleBid) == "{}" { // empty struct
			dst.SimpleBid = nil
		} else {
			match++
		}
	} else {
		dst.SimpleBid = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BidGroup = nil
		dst.ComplexBid = nil
		dst.ComplexBidComponent = nil
		dst.SimpleBid = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BidSubmission)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BidSubmission)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BidSubmission) MarshalJSON() ([]byte, error) {
	if src.BidGroup != nil {
		return json.Marshal(&src.BidGroup)
	}

	if src.ComplexBid != nil {
		return json.Marshal(&src.ComplexBid)
	}

	if src.ComplexBidComponent != nil {
		return json.Marshal(&src.ComplexBidComponent)
	}

	if src.SimpleBid != nil {
		return json.Marshal(&src.SimpleBid)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BidSubmission) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BidGroup != nil {
		return obj.BidGroup
	}

	if obj.ComplexBid != nil {
		return obj.ComplexBid
	}

	if obj.ComplexBidComponent != nil {
		return obj.ComplexBidComponent
	}

	if obj.SimpleBid != nil {
		return obj.SimpleBid
	}

	// all schemas are nil
	return nil
}

type NullableBidSubmission struct {
	value *BidSubmission
	isSet bool
}

func (v NullableBidSubmission) Get() *BidSubmission {
	return v.value
}

func (v *NullableBidSubmission) Set(val *BidSubmission) {
	v.value = val
	v.isSet = true
}

func (v NullableBidSubmission) IsSet() bool {
	return v.isSet
}

func (v *NullableBidSubmission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBidSubmission(val *BidSubmission) *NullableBidSubmission {
	return &NullableBidSubmission{value: val, isSet: true}
}

func (v NullableBidSubmission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBidSubmission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


