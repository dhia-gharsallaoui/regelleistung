/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchRequest{}

// BatchRequest Representation of the batch request.
type BatchRequest struct {
	// List of operations to be processed.
	Ops []BatchOperation `json:"ops"`
	// If true, then the operations can be executed in arbitrary order and in parallel. If false, then serial execution in request order will be enforced. This property has no impact on the results order in the batch response object.
	Parallel *bool `json:"parallel,omitempty"`
}

// NewBatchRequest instantiates a new BatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchRequest(ops []BatchOperation) *BatchRequest {
	this := BatchRequest{}
	this.Ops = ops
	var parallel bool = false
	this.Parallel = &parallel
	return &this
}

// NewBatchRequestWithDefaults instantiates a new BatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchRequestWithDefaults() *BatchRequest {
	this := BatchRequest{}
	var parallel bool = false
	this.Parallel = &parallel
	return &this
}

// GetOps returns the Ops field value
func (o *BatchRequest) GetOps() []BatchOperation {
	if o == nil {
		var ret []BatchOperation
		return ret
	}

	return o.Ops
}

// GetOpsOk returns a tuple with the Ops field value
// and a boolean to check if the value has been set.
func (o *BatchRequest) GetOpsOk() ([]BatchOperation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ops, true
}

// SetOps sets field value
func (o *BatchRequest) SetOps(v []BatchOperation) {
	o.Ops = v
}

// GetParallel returns the Parallel field value if set, zero value otherwise.
func (o *BatchRequest) GetParallel() bool {
	if o == nil || isNil(o.Parallel) {
		var ret bool
		return ret
	}
	return *o.Parallel
}

// GetParallelOk returns a tuple with the Parallel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchRequest) GetParallelOk() (*bool, bool) {
	if o == nil || isNil(o.Parallel) {
		return nil, false
	}
	return o.Parallel, true
}

// HasParallel returns a boolean if a field has been set.
func (o *BatchRequest) HasParallel() bool {
	if o != nil && !isNil(o.Parallel) {
		return true
	}

	return false
}

// SetParallel gets a reference to the given bool and assigns it to the Parallel field.
func (o *BatchRequest) SetParallel(v bool) {
	o.Parallel = &v
}

func (o BatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ops"] = o.Ops
	if !isNil(o.Parallel) {
		toSerialize["parallel"] = o.Parallel
	}
	return toSerialize, nil
}

type NullableBatchRequest struct {
	value *BatchRequest
	isSet bool
}

func (v NullableBatchRequest) Get() *BatchRequest {
	return v.value
}

func (v *NullableBatchRequest) Set(val *BatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchRequest(val *BatchRequest) *NullableBatchRequest {
	return &NullableBatchRequest{value: val, isSet: true}
}

func (v NullableBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


