/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PrequalifiedCapacity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrequalifiedCapacity{}

// PrequalifiedCapacity Representation of master contract.
type PrequalifiedCapacity struct {
	ProductType *ProductType `json:"productType,omitempty"`
	ConnectingZone *ConnectingZone `json:"connectingZone,omitempty"`
	// Volume of maximum negative reserve in specific connecting zone.
	MaxNegativeCapacity *float32 `json:"maxNegativeCapacity,omitempty"`
	// Volume of maximum positive reserve in specific connecting zone.
	MaxPositiveCapacity *float32 `json:"maxPositiveCapacity,omitempty"`
}

// NewPrequalifiedCapacity instantiates a new PrequalifiedCapacity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrequalifiedCapacity() *PrequalifiedCapacity {
	this := PrequalifiedCapacity{}
	return &this
}

// NewPrequalifiedCapacityWithDefaults instantiates a new PrequalifiedCapacity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrequalifiedCapacityWithDefaults() *PrequalifiedCapacity {
	this := PrequalifiedCapacity{}
	return &this
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *PrequalifiedCapacity) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrequalifiedCapacity) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *PrequalifiedCapacity) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *PrequalifiedCapacity) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetConnectingZone returns the ConnectingZone field value if set, zero value otherwise.
func (o *PrequalifiedCapacity) GetConnectingZone() ConnectingZone {
	if o == nil || isNil(o.ConnectingZone) {
		var ret ConnectingZone
		return ret
	}
	return *o.ConnectingZone
}

// GetConnectingZoneOk returns a tuple with the ConnectingZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrequalifiedCapacity) GetConnectingZoneOk() (*ConnectingZone, bool) {
	if o == nil || isNil(o.ConnectingZone) {
		return nil, false
	}
	return o.ConnectingZone, true
}

// HasConnectingZone returns a boolean if a field has been set.
func (o *PrequalifiedCapacity) HasConnectingZone() bool {
	if o != nil && !isNil(o.ConnectingZone) {
		return true
	}

	return false
}

// SetConnectingZone gets a reference to the given ConnectingZone and assigns it to the ConnectingZone field.
func (o *PrequalifiedCapacity) SetConnectingZone(v ConnectingZone) {
	o.ConnectingZone = &v
}

// GetMaxNegativeCapacity returns the MaxNegativeCapacity field value if set, zero value otherwise.
func (o *PrequalifiedCapacity) GetMaxNegativeCapacity() float32 {
	if o == nil || isNil(o.MaxNegativeCapacity) {
		var ret float32
		return ret
	}
	return *o.MaxNegativeCapacity
}

// GetMaxNegativeCapacityOk returns a tuple with the MaxNegativeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrequalifiedCapacity) GetMaxNegativeCapacityOk() (*float32, bool) {
	if o == nil || isNil(o.MaxNegativeCapacity) {
		return nil, false
	}
	return o.MaxNegativeCapacity, true
}

// HasMaxNegativeCapacity returns a boolean if a field has been set.
func (o *PrequalifiedCapacity) HasMaxNegativeCapacity() bool {
	if o != nil && !isNil(o.MaxNegativeCapacity) {
		return true
	}

	return false
}

// SetMaxNegativeCapacity gets a reference to the given float32 and assigns it to the MaxNegativeCapacity field.
func (o *PrequalifiedCapacity) SetMaxNegativeCapacity(v float32) {
	o.MaxNegativeCapacity = &v
}

// GetMaxPositiveCapacity returns the MaxPositiveCapacity field value if set, zero value otherwise.
func (o *PrequalifiedCapacity) GetMaxPositiveCapacity() float32 {
	if o == nil || isNil(o.MaxPositiveCapacity) {
		var ret float32
		return ret
	}
	return *o.MaxPositiveCapacity
}

// GetMaxPositiveCapacityOk returns a tuple with the MaxPositiveCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrequalifiedCapacity) GetMaxPositiveCapacityOk() (*float32, bool) {
	if o == nil || isNil(o.MaxPositiveCapacity) {
		return nil, false
	}
	return o.MaxPositiveCapacity, true
}

// HasMaxPositiveCapacity returns a boolean if a field has been set.
func (o *PrequalifiedCapacity) HasMaxPositiveCapacity() bool {
	if o != nil && !isNil(o.MaxPositiveCapacity) {
		return true
	}

	return false
}

// SetMaxPositiveCapacity gets a reference to the given float32 and assigns it to the MaxPositiveCapacity field.
func (o *PrequalifiedCapacity) SetMaxPositiveCapacity(v float32) {
	o.MaxPositiveCapacity = &v
}

func (o PrequalifiedCapacity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrequalifiedCapacity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.ConnectingZone) {
		toSerialize["connectingZone"] = o.ConnectingZone
	}
	if !isNil(o.MaxNegativeCapacity) {
		toSerialize["maxNegativeCapacity"] = o.MaxNegativeCapacity
	}
	if !isNil(o.MaxPositiveCapacity) {
		toSerialize["maxPositiveCapacity"] = o.MaxPositiveCapacity
	}
	return toSerialize, nil
}

type NullablePrequalifiedCapacity struct {
	value *PrequalifiedCapacity
	isSet bool
}

func (v NullablePrequalifiedCapacity) Get() *PrequalifiedCapacity {
	return v.value
}

func (v *NullablePrequalifiedCapacity) Set(val *PrequalifiedCapacity) {
	v.value = val
	v.isSet = true
}

func (v NullablePrequalifiedCapacity) IsSet() bool {
	return v.isSet
}

func (v *NullablePrequalifiedCapacity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrequalifiedCapacity(val *PrequalifiedCapacity) *NullablePrequalifiedCapacity {
	return &NullablePrequalifiedCapacity{value: val, isSet: true}
}

func (v NullablePrequalifiedCapacity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrequalifiedCapacity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


