/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BidGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BidGroup{}

// BidGroup Bid Group
type BidGroup struct {
	Market ReserveMarket `json:"market"`
	ProductType ProductType `json:"productType"`
	BidType BidType `json:"bidType"`
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`
	// Custom tag for bids
	Tag *string `json:"tag,omitempty"`
	Components []SimpleBid `json:"components"`
}

// NewBidGroup instantiates a new BidGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBidGroup(market ReserveMarket, productType ProductType, bidType BidType, components []SimpleBid) *BidGroup {
	this := BidGroup{}
	this.Market = market
	this.ProductType = productType
	this.BidType = bidType
	this.Components = components
	return &this
}

// NewBidGroupWithDefaults instantiates a new BidGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBidGroupWithDefaults() *BidGroup {
	this := BidGroup{}
	var bidType BidType = SIMPLE
	this.BidType = bidType
	return &this
}

// GetMarket returns the Market field value
func (o *BidGroup) GetMarket() ReserveMarket {
	if o == nil {
		var ret ReserveMarket
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *BidGroup) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *BidGroup) SetMarket(v ReserveMarket) {
	o.Market = v
}

// GetProductType returns the ProductType field value
func (o *BidGroup) GetProductType() ProductType {
	if o == nil {
		var ret ProductType
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *BidGroup) GetProductTypeOk() (*ProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *BidGroup) SetProductType(v ProductType) {
	o.ProductType = v
}

// GetBidType returns the BidType field value
func (o *BidGroup) GetBidType() BidType {
	if o == nil {
		var ret BidType
		return ret
	}

	return o.BidType
}

// GetBidTypeOk returns a tuple with the BidType field value
// and a boolean to check if the value has been set.
func (o *BidGroup) GetBidTypeOk() (*BidType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BidType, true
}

// SetBidType sets field value
func (o *BidGroup) SetBidType(v BidType) {
	o.BidType = v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *BidGroup) GetTimeInterval() TimeInterval {
	if o == nil || isNil(o.TimeInterval) {
		var ret TimeInterval
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BidGroup) GetTimeIntervalOk() (*TimeInterval, bool) {
	if o == nil || isNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *BidGroup) HasTimeInterval() bool {
	if o != nil && !isNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given TimeInterval and assigns it to the TimeInterval field.
func (o *BidGroup) SetTimeInterval(v TimeInterval) {
	o.TimeInterval = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *BidGroup) GetTag() string {
	if o == nil || isNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BidGroup) GetTagOk() (*string, bool) {
	if o == nil || isNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *BidGroup) HasTag() bool {
	if o != nil && !isNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *BidGroup) SetTag(v string) {
	o.Tag = &v
}

// GetComponents returns the Components field value
func (o *BidGroup) GetComponents() []SimpleBid {
	if o == nil {
		var ret []SimpleBid
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *BidGroup) GetComponentsOk() ([]SimpleBid, bool) {
	if o == nil {
		return nil, false
	}
	return o.Components, true
}

// SetComponents sets field value
func (o *BidGroup) SetComponents(v []SimpleBid) {
	o.Components = v
}

func (o BidGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BidGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["market"] = o.Market
	toSerialize["productType"] = o.ProductType
	toSerialize["bidType"] = o.BidType
	if !isNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if !isNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["components"] = o.Components
	return toSerialize, nil
}

type NullableBidGroup struct {
	value *BidGroup
	isSet bool
}

func (v NullableBidGroup) Get() *BidGroup {
	return v.value
}

func (v *NullableBidGroup) Set(val *BidGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableBidGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableBidGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBidGroup(val *BidGroup) *NullableBidGroup {
	return &NullableBidGroup{value: val, isSet: true}
}

func (v NullableBidGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBidGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


