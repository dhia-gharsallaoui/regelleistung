/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Quantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quantity{}

// Quantity Quantity of control reserve capacity / energy
type Quantity struct {
	// Specify the quantity.
	Quantity float32 `json:"quantity"`
	// The unit of measurement underlying the volume (MW per unit (code MAW), MWh per unit (code MWH)). The units of measurement are in accordance with UN/ECE Recommendation 20.
	MeasureUnit string `json:"measureUnit"`
}

// NewQuantity instantiates a new Quantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuantity(quantity float32, measureUnit string) *Quantity {
	this := Quantity{}
	this.Quantity = quantity
	this.MeasureUnit = measureUnit
	return &this
}

// NewQuantityWithDefaults instantiates a new Quantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuantityWithDefaults() *Quantity {
	this := Quantity{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *Quantity) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Quantity) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Quantity) SetQuantity(v float32) {
	o.Quantity = v
}

// GetMeasureUnit returns the MeasureUnit field value
func (o *Quantity) GetMeasureUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasureUnit
}

// GetMeasureUnitOk returns a tuple with the MeasureUnit field value
// and a boolean to check if the value has been set.
func (o *Quantity) GetMeasureUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasureUnit, true
}

// SetMeasureUnit sets field value
func (o *Quantity) SetMeasureUnit(v string) {
	o.MeasureUnit = v
}

func (o Quantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["measureUnit"] = o.MeasureUnit
	return toSerialize, nil
}

type NullableQuantity struct {
	value *Quantity
	isSet bool
}

func (v NullableQuantity) Get() *Quantity {
	return v.value
}

func (v *NullableQuantity) Set(val *Quantity) {
	v.value = val
	v.isSet = true
}

func (v NullableQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuantity(val *Quantity) *NullableQuantity {
	return &NullableQuantity{value: val, isSet: true}
}

func (v NullableQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


