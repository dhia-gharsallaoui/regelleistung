/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AllocationResultElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocationResultElement{}

// AllocationResultElement Representation of allocation result element.
type AllocationResultElement struct {
	ProductType *ProductType `json:"productType,omitempty"`
	// Delivery day of offered control reserve / energy. (ISO 8601 format YYYY-MM-DD).
	DeliveryDate *string `json:"deliveryDate,omitempty"`
	ProductName *ProductName `json:"productName,omitempty"`
	Direction *Direction `json:"direction,omitempty"`
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`
	ConnectingZone *ConnectingZone `json:"connectingZone,omitempty"`
	Market *ReserveMarket `json:"market,omitempty"`
	Status *string `json:"status,omitempty"`
	// Specifies the allocation ranking of bids as a natural number in ascending order starting at 1.
	AllocationRanking *int32 `json:"allocationRanking,omitempty"`
	// Specifies the activation ranking of accepted aFRR/mFRR bids as a natural number in ascending order starting at 1.
	ActivationRanking NullableInt32 `json:"activationRanking,omitempty"`
	Indivisible *bool `json:"indivisible,omitempty"`
	OfferedQuantity *Quantity `json:"offeredQuantity,omitempty"`
	AcceptedQuantity *Quantity `json:"acceptedQuantity,omitempty"`
	// Price informations.
	Prices []Price `json:"prices,omitempty"`
}

// NewAllocationResultElement instantiates a new AllocationResultElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationResultElement() *AllocationResultElement {
	this := AllocationResultElement{}
	var indivisible bool = false
	this.Indivisible = &indivisible
	return &this
}

// NewAllocationResultElementWithDefaults instantiates a new AllocationResultElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationResultElementWithDefaults() *AllocationResultElement {
	this := AllocationResultElement{}
	var indivisible bool = false
	this.Indivisible = &indivisible
	return &this
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *AllocationResultElement) GetProductType() ProductType {
	if o == nil || isNil(o.ProductType) {
		var ret ProductType
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetProductTypeOk() (*ProductType, bool) {
	if o == nil || isNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *AllocationResultElement) HasProductType() bool {
	if o != nil && !isNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given ProductType and assigns it to the ProductType field.
func (o *AllocationResultElement) SetProductType(v ProductType) {
	o.ProductType = &v
}

// GetDeliveryDate returns the DeliveryDate field value if set, zero value otherwise.
func (o *AllocationResultElement) GetDeliveryDate() string {
	if o == nil || isNil(o.DeliveryDate) {
		var ret string
		return ret
	}
	return *o.DeliveryDate
}

// GetDeliveryDateOk returns a tuple with the DeliveryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetDeliveryDateOk() (*string, bool) {
	if o == nil || isNil(o.DeliveryDate) {
		return nil, false
	}
	return o.DeliveryDate, true
}

// HasDeliveryDate returns a boolean if a field has been set.
func (o *AllocationResultElement) HasDeliveryDate() bool {
	if o != nil && !isNil(o.DeliveryDate) {
		return true
	}

	return false
}

// SetDeliveryDate gets a reference to the given string and assigns it to the DeliveryDate field.
func (o *AllocationResultElement) SetDeliveryDate(v string) {
	o.DeliveryDate = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *AllocationResultElement) GetProductName() ProductName {
	if o == nil || isNil(o.ProductName) {
		var ret ProductName
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetProductNameOk() (*ProductName, bool) {
	if o == nil || isNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *AllocationResultElement) HasProductName() bool {
	if o != nil && !isNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given ProductName and assigns it to the ProductName field.
func (o *AllocationResultElement) SetProductName(v ProductName) {
	o.ProductName = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *AllocationResultElement) GetDirection() Direction {
	if o == nil || isNil(o.Direction) {
		var ret Direction
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetDirectionOk() (*Direction, bool) {
	if o == nil || isNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *AllocationResultElement) HasDirection() bool {
	if o != nil && !isNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given Direction and assigns it to the Direction field.
func (o *AllocationResultElement) SetDirection(v Direction) {
	o.Direction = &v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *AllocationResultElement) GetTimeInterval() TimeInterval {
	if o == nil || isNil(o.TimeInterval) {
		var ret TimeInterval
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetTimeIntervalOk() (*TimeInterval, bool) {
	if o == nil || isNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *AllocationResultElement) HasTimeInterval() bool {
	if o != nil && !isNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given TimeInterval and assigns it to the TimeInterval field.
func (o *AllocationResultElement) SetTimeInterval(v TimeInterval) {
	o.TimeInterval = &v
}

// GetConnectingZone returns the ConnectingZone field value if set, zero value otherwise.
func (o *AllocationResultElement) GetConnectingZone() ConnectingZone {
	if o == nil || isNil(o.ConnectingZone) {
		var ret ConnectingZone
		return ret
	}
	return *o.ConnectingZone
}

// GetConnectingZoneOk returns a tuple with the ConnectingZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetConnectingZoneOk() (*ConnectingZone, bool) {
	if o == nil || isNil(o.ConnectingZone) {
		return nil, false
	}
	return o.ConnectingZone, true
}

// HasConnectingZone returns a boolean if a field has been set.
func (o *AllocationResultElement) HasConnectingZone() bool {
	if o != nil && !isNil(o.ConnectingZone) {
		return true
	}

	return false
}

// SetConnectingZone gets a reference to the given ConnectingZone and assigns it to the ConnectingZone field.
func (o *AllocationResultElement) SetConnectingZone(v ConnectingZone) {
	o.ConnectingZone = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *AllocationResultElement) GetMarket() ReserveMarket {
	if o == nil || isNil(o.Market) {
		var ret ReserveMarket
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetMarketOk() (*ReserveMarket, bool) {
	if o == nil || isNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *AllocationResultElement) HasMarket() bool {
	if o != nil && !isNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given ReserveMarket and assigns it to the Market field.
func (o *AllocationResultElement) SetMarket(v ReserveMarket) {
	o.Market = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AllocationResultElement) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AllocationResultElement) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AllocationResultElement) SetStatus(v string) {
	o.Status = &v
}

// GetAllocationRanking returns the AllocationRanking field value if set, zero value otherwise.
func (o *AllocationResultElement) GetAllocationRanking() int32 {
	if o == nil || isNil(o.AllocationRanking) {
		var ret int32
		return ret
	}
	return *o.AllocationRanking
}

// GetAllocationRankingOk returns a tuple with the AllocationRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetAllocationRankingOk() (*int32, bool) {
	if o == nil || isNil(o.AllocationRanking) {
		return nil, false
	}
	return o.AllocationRanking, true
}

// HasAllocationRanking returns a boolean if a field has been set.
func (o *AllocationResultElement) HasAllocationRanking() bool {
	if o != nil && !isNil(o.AllocationRanking) {
		return true
	}

	return false
}

// SetAllocationRanking gets a reference to the given int32 and assigns it to the AllocationRanking field.
func (o *AllocationResultElement) SetAllocationRanking(v int32) {
	o.AllocationRanking = &v
}

// GetActivationRanking returns the ActivationRanking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllocationResultElement) GetActivationRanking() int32 {
	if o == nil || isNil(o.ActivationRanking.Get()) {
		var ret int32
		return ret
	}
	return *o.ActivationRanking.Get()
}

// GetActivationRankingOk returns a tuple with the ActivationRanking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllocationResultElement) GetActivationRankingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActivationRanking.Get(), o.ActivationRanking.IsSet()
}

// HasActivationRanking returns a boolean if a field has been set.
func (o *AllocationResultElement) HasActivationRanking() bool {
	if o != nil && o.ActivationRanking.IsSet() {
		return true
	}

	return false
}

// SetActivationRanking gets a reference to the given NullableInt32 and assigns it to the ActivationRanking field.
func (o *AllocationResultElement) SetActivationRanking(v int32) {
	o.ActivationRanking.Set(&v)
}
// SetActivationRankingNil sets the value for ActivationRanking to be an explicit nil
func (o *AllocationResultElement) SetActivationRankingNil() {
	o.ActivationRanking.Set(nil)
}

// UnsetActivationRanking ensures that no value is present for ActivationRanking, not even an explicit nil
func (o *AllocationResultElement) UnsetActivationRanking() {
	o.ActivationRanking.Unset()
}

// GetIndivisible returns the Indivisible field value if set, zero value otherwise.
func (o *AllocationResultElement) GetIndivisible() bool {
	if o == nil || isNil(o.Indivisible) {
		var ret bool
		return ret
	}
	return *o.Indivisible
}

// GetIndivisibleOk returns a tuple with the Indivisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetIndivisibleOk() (*bool, bool) {
	if o == nil || isNil(o.Indivisible) {
		return nil, false
	}
	return o.Indivisible, true
}

// HasIndivisible returns a boolean if a field has been set.
func (o *AllocationResultElement) HasIndivisible() bool {
	if o != nil && !isNil(o.Indivisible) {
		return true
	}

	return false
}

// SetIndivisible gets a reference to the given bool and assigns it to the Indivisible field.
func (o *AllocationResultElement) SetIndivisible(v bool) {
	o.Indivisible = &v
}

// GetOfferedQuantity returns the OfferedQuantity field value if set, zero value otherwise.
func (o *AllocationResultElement) GetOfferedQuantity() Quantity {
	if o == nil || isNil(o.OfferedQuantity) {
		var ret Quantity
		return ret
	}
	return *o.OfferedQuantity
}

// GetOfferedQuantityOk returns a tuple with the OfferedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetOfferedQuantityOk() (*Quantity, bool) {
	if o == nil || isNil(o.OfferedQuantity) {
		return nil, false
	}
	return o.OfferedQuantity, true
}

// HasOfferedQuantity returns a boolean if a field has been set.
func (o *AllocationResultElement) HasOfferedQuantity() bool {
	if o != nil && !isNil(o.OfferedQuantity) {
		return true
	}

	return false
}

// SetOfferedQuantity gets a reference to the given Quantity and assigns it to the OfferedQuantity field.
func (o *AllocationResultElement) SetOfferedQuantity(v Quantity) {
	o.OfferedQuantity = &v
}

// GetAcceptedQuantity returns the AcceptedQuantity field value if set, zero value otherwise.
func (o *AllocationResultElement) GetAcceptedQuantity() Quantity {
	if o == nil || isNil(o.AcceptedQuantity) {
		var ret Quantity
		return ret
	}
	return *o.AcceptedQuantity
}

// GetAcceptedQuantityOk returns a tuple with the AcceptedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetAcceptedQuantityOk() (*Quantity, bool) {
	if o == nil || isNil(o.AcceptedQuantity) {
		return nil, false
	}
	return o.AcceptedQuantity, true
}

// HasAcceptedQuantity returns a boolean if a field has been set.
func (o *AllocationResultElement) HasAcceptedQuantity() bool {
	if o != nil && !isNil(o.AcceptedQuantity) {
		return true
	}

	return false
}

// SetAcceptedQuantity gets a reference to the given Quantity and assigns it to the AcceptedQuantity field.
func (o *AllocationResultElement) SetAcceptedQuantity(v Quantity) {
	o.AcceptedQuantity = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *AllocationResultElement) GetPrices() []Price {
	if o == nil || isNil(o.Prices) {
		var ret []Price
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationResultElement) GetPricesOk() ([]Price, bool) {
	if o == nil || isNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *AllocationResultElement) HasPrices() bool {
	if o != nil && !isNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []Price and assigns it to the Prices field.
func (o *AllocationResultElement) SetPrices(v []Price) {
	o.Prices = v
}

func (o AllocationResultElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocationResultElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	if !isNil(o.DeliveryDate) {
		toSerialize["deliveryDate"] = o.DeliveryDate
	}
	if !isNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !isNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !isNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if !isNil(o.ConnectingZone) {
		toSerialize["connectingZone"] = o.ConnectingZone
	}
	if !isNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.AllocationRanking) {
		toSerialize["allocationRanking"] = o.AllocationRanking
	}
	if o.ActivationRanking.IsSet() {
		toSerialize["activationRanking"] = o.ActivationRanking.Get()
	}
	if !isNil(o.Indivisible) {
		toSerialize["indivisible"] = o.Indivisible
	}
	if !isNil(o.OfferedQuantity) {
		toSerialize["offeredQuantity"] = o.OfferedQuantity
	}
	if !isNil(o.AcceptedQuantity) {
		toSerialize["acceptedQuantity"] = o.AcceptedQuantity
	}
	if !isNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableAllocationResultElement struct {
	value *AllocationResultElement
	isSet bool
}

func (v NullableAllocationResultElement) Get() *AllocationResultElement {
	return v.value
}

func (v *NullableAllocationResultElement) Set(val *AllocationResultElement) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationResultElement) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationResultElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationResultElement(val *AllocationResultElement) *NullableAllocationResultElement {
	return &NullableAllocationResultElement{value: val, isSet: true}
}

func (v NullableAllocationResultElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationResultElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


