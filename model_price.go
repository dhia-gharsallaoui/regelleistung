/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Price type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Price{}

// Price Representation of price element.
type Price struct {
	// Specify the amount.
	Amount float32 `json:"amount"`
	// The unit of measurement underlying the price (MW per unit (code MAW), MWh per unit (code MWH)) is used to differentiate between capacity fees (EUR/MW) and energy prices (EUR/MWh). The units of measurement are in accordance with UN/ECE Recommendation 20.
	MeasureUnit string `json:"measureUnit"`
	// Capacity price resolution in ISO 8601 format. This field is read-only for control purposes. It is determined automatically depending on the modalities applicable to the tender.
	Resolution *string `json:"resolution,omitempty"`
	// The currency in which the monetary amount is expressed. The maximum length of this information is 3 alphanumeric characters respecting the standard ISO 4217.
	Currency *string `json:"currency,omitempty"`
	// The direction of payment for activated control power relates to the energy price only (measureUnit = MWH).
	PaymentDirection *string `json:"paymentDirection,omitempty"`
	// Type of price. When bidding, the type must have the value `OFFER`. 
	Type *string `json:"type,omitempty"`
}

// NewPrice instantiates a new Price object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrice(amount float32, measureUnit string) *Price {
	this := Price{}
	this.Amount = amount
	this.MeasureUnit = measureUnit
	var currency string = "EUR"
	this.Currency = &currency
	var paymentDirection string = "GRID_TO_PROVIDER"
	this.PaymentDirection = &paymentDirection
	return &this
}

// NewPriceWithDefaults instantiates a new Price object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceWithDefaults() *Price {
	this := Price{}
	var currency string = "EUR"
	this.Currency = &currency
	var paymentDirection string = "GRID_TO_PROVIDER"
	this.PaymentDirection = &paymentDirection
	return &this
}

// GetAmount returns the Amount field value
func (o *Price) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Price) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Price) SetAmount(v float32) {
	o.Amount = v
}

// GetMeasureUnit returns the MeasureUnit field value
func (o *Price) GetMeasureUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasureUnit
}

// GetMeasureUnitOk returns a tuple with the MeasureUnit field value
// and a boolean to check if the value has been set.
func (o *Price) GetMeasureUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasureUnit, true
}

// SetMeasureUnit sets field value
func (o *Price) SetMeasureUnit(v string) {
	o.MeasureUnit = v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *Price) GetResolution() string {
	if o == nil || isNil(o.Resolution) {
		var ret string
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetResolutionOk() (*string, bool) {
	if o == nil || isNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *Price) HasResolution() bool {
	if o != nil && !isNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given string and assigns it to the Resolution field.
func (o *Price) SetResolution(v string) {
	o.Resolution = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Price) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Price) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Price) SetCurrency(v string) {
	o.Currency = &v
}

// GetPaymentDirection returns the PaymentDirection field value if set, zero value otherwise.
func (o *Price) GetPaymentDirection() string {
	if o == nil || isNil(o.PaymentDirection) {
		var ret string
		return ret
	}
	return *o.PaymentDirection
}

// GetPaymentDirectionOk returns a tuple with the PaymentDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPaymentDirectionOk() (*string, bool) {
	if o == nil || isNil(o.PaymentDirection) {
		return nil, false
	}
	return o.PaymentDirection, true
}

// HasPaymentDirection returns a boolean if a field has been set.
func (o *Price) HasPaymentDirection() bool {
	if o != nil && !isNil(o.PaymentDirection) {
		return true
	}

	return false
}

// SetPaymentDirection gets a reference to the given string and assigns it to the PaymentDirection field.
func (o *Price) SetPaymentDirection(v string) {
	o.PaymentDirection = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Price) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Price) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Price) SetType(v string) {
	o.Type = &v
}

func (o Price) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Price) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["measureUnit"] = o.MeasureUnit
	// skip: resolution is readOnly
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.PaymentDirection) {
		toSerialize["paymentDirection"] = o.PaymentDirection
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePrice struct {
	value *Price
	isSet bool
}

func (v NullablePrice) Get() *Price {
	return v.value
}

func (v *NullablePrice) Set(val *Price) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice(val *Price) *NullablePrice {
	return &NullablePrice{value: val, isSet: true}
}

func (v NullablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


