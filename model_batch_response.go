/*
IP RL BSP API

IP RL BSP API for participation in capacity/energy market tenders.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchResponse{}

// BatchResponse Result of the batch request.
type BatchResponse struct {
	// Contains the list of individual responses in the order of the batch requests.
	Responses []BatchOperationResponse `json:"responses,omitempty"`
	// Number of successful requests (2xx status code).
	SuccessfulOps *int32 `json:"successfulOps,omitempty"`
	// Number of failed requests (all non 2xx status codes).
	FailedOps *int32 `json:"failedOps,omitempty"`
}

// NewBatchResponse instantiates a new BatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchResponse() *BatchResponse {
	this := BatchResponse{}
	return &this
}

// NewBatchResponseWithDefaults instantiates a new BatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchResponseWithDefaults() *BatchResponse {
	this := BatchResponse{}
	return &this
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *BatchResponse) GetResponses() []BatchOperationResponse {
	if o == nil || isNil(o.Responses) {
		var ret []BatchOperationResponse
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponse) GetResponsesOk() ([]BatchOperationResponse, bool) {
	if o == nil || isNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *BatchResponse) HasResponses() bool {
	if o != nil && !isNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []BatchOperationResponse and assigns it to the Responses field.
func (o *BatchResponse) SetResponses(v []BatchOperationResponse) {
	o.Responses = v
}

// GetSuccessfulOps returns the SuccessfulOps field value if set, zero value otherwise.
func (o *BatchResponse) GetSuccessfulOps() int32 {
	if o == nil || isNil(o.SuccessfulOps) {
		var ret int32
		return ret
	}
	return *o.SuccessfulOps
}

// GetSuccessfulOpsOk returns a tuple with the SuccessfulOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponse) GetSuccessfulOpsOk() (*int32, bool) {
	if o == nil || isNil(o.SuccessfulOps) {
		return nil, false
	}
	return o.SuccessfulOps, true
}

// HasSuccessfulOps returns a boolean if a field has been set.
func (o *BatchResponse) HasSuccessfulOps() bool {
	if o != nil && !isNil(o.SuccessfulOps) {
		return true
	}

	return false
}

// SetSuccessfulOps gets a reference to the given int32 and assigns it to the SuccessfulOps field.
func (o *BatchResponse) SetSuccessfulOps(v int32) {
	o.SuccessfulOps = &v
}

// GetFailedOps returns the FailedOps field value if set, zero value otherwise.
func (o *BatchResponse) GetFailedOps() int32 {
	if o == nil || isNil(o.FailedOps) {
		var ret int32
		return ret
	}
	return *o.FailedOps
}

// GetFailedOpsOk returns a tuple with the FailedOps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchResponse) GetFailedOpsOk() (*int32, bool) {
	if o == nil || isNil(o.FailedOps) {
		return nil, false
	}
	return o.FailedOps, true
}

// HasFailedOps returns a boolean if a field has been set.
func (o *BatchResponse) HasFailedOps() bool {
	if o != nil && !isNil(o.FailedOps) {
		return true
	}

	return false
}

// SetFailedOps gets a reference to the given int32 and assigns it to the FailedOps field.
func (o *BatchResponse) SetFailedOps(v int32) {
	o.FailedOps = &v
}

func (o BatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	if !isNil(o.SuccessfulOps) {
		toSerialize["successfulOps"] = o.SuccessfulOps
	}
	if !isNil(o.FailedOps) {
		toSerialize["failedOps"] = o.FailedOps
	}
	return toSerialize, nil
}

type NullableBatchResponse struct {
	value *BatchResponse
	isSet bool
}

func (v NullableBatchResponse) Get() *BatchResponse {
	return v.value
}

func (v *NullableBatchResponse) Set(val *BatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchResponse(val *BatchResponse) *NullableBatchResponse {
	return &NullableBatchResponse{value: val, isSet: true}
}

func (v NullableBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


